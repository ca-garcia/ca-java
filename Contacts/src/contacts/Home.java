/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package contacts;


import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Array;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 *
 * @author carlosalberto
 */
public class Home extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        jFileChooser1.setFileFilter(new FileNameExtensionFilter("Archivos de texto(*.txt)", "txt"));
        try {
            this.setIconImage(ImageIO.read(getClass().getResource("img/contact.png")));
//            this.setIconImage(ImageIO.read(new File("img/java_cup.png")));
        }
        catch (IOException exc) {
            exc.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        edtName = new javax.swing.JTextField();
        edtPhone = new javax.swing.JTextField();
        edtEmail = new javax.swing.JTextField();
        btnEdit = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusBar = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        findMenuItem = new javax.swing.JMenuItem();
        newMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        testDataMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        truncateMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jFileChooser1.setDialogTitle("Exportar agenda");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Contactos");
        setResizable(false);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Listado:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCellSelectionEnabled(true);
        jTable1.setFillsViewportHeight(true);
        jTable1.setFocusable(false);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detalles:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblName.setText("Nombre:");
        lblName.setName("lblname"); // NOI18N

        lblPhone.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPhone.setText("Tel√©fono:");

        lblEmail.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblEmail.setText("E-mail:");

        edtName.setEditable(false);

        edtPhone.setEditable(false);

        edtEmail.setEditable(false);

        btnEdit.setText("Editar");
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDel.setText("Eliminar");
        btnDel.setEnabled(false);
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnSave.setText("Guardar");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblEmail)
                            .addComponent(lblPhone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(edtPhone)
                            .addComponent(edtEmail))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(edtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPhone)
                    .addComponent(btnEdit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail)
                    .addComponent(btnSave))
                .addContainerGap(149, Short.MAX_VALUE))
        );

        statusBar.setEditable(false);
        statusBar.setBackground(new java.awt.Color(240, 240, 240));
        statusBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 0, true));
        jScrollPane1.setViewportView(statusBar);

        fileMenu.setMnemonic('a');
        fileMenu.setText("Archivo");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Probar conexi√≥n");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveAsMenuItem.setMnemonic('s');
        saveAsMenuItem.setText("Exportar agenda");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Editar");

        findMenuItem.setMnemonic('y');
        findMenuItem.setText("Buscar contacto");
        findMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(findMenuItem);

        newMenuItem.setMnemonic('t');
        newMenuItem.setText("Nuevo contacto");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(newMenuItem);
        editMenu.add(jSeparator2);

        testDataMenuItem.setText("Insertar Datos de Prueba");
        testDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testDataMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(testDataMenuItem);
        editMenu.add(jSeparator3);

        truncateMenuItem.setText("Vaciar Agenda");
        truncateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                truncateMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(truncateMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('y');
        helpMenu.setText("Ayuda");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("Acerca de");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        
        btnEdit.setEnabled(true);
        btnDel.setEnabled(true);
        
        int row = jTable1.getSelectedRow();
        Object value = jTable1.getValueAt(row, 0);//0 por ser una sola columna.
//        edtName.setText(value.toString());
//        System.out.println(String.valueOf(value));
        
        try {
            
            Class.forName("com.mysql.jdbc.Driver");            
            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1/contacts", "root", "");
            System.out.println("Conexion exitosa...");            
            
            String sql = "SELECT * FROM contact WHERE name=?";
            
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setString(1,value.toString());
            ResultSet result = pst.executeQuery();
            
            if(result.first()){
                setContactName(result.getString("name"));
                setContactPhone(result.getString("phone"));
                setContactEmail(result.getString("email"));
                setSelectedID(Integer.parseInt(result.getString(1))); //id
//                System.out.println(String.valueOf(selectedID));
            }   
        } 
        catch (SQLException sqlex) {
            System.out.println("MySQL Error: "+sqlex.toString());
            statusBar.setText("MySQL Error: "+sqlex.getMessage());
        }   
        catch (ClassNotFoundException err) {
            err.printStackTrace();
            statusBar.setText("ClassNotFoundException: "+"No se encuentra la Clase especificada: "+err.getMessage());
        }                
        catch (Exception ex) {
            System.out.println("se ha producido un error inesperado: "+ex.getMessage());
            statusBar.setText("Error: Se ha producido un error inesperado: "+ex.getMessage());
        }
        
        edtName.setEditable(false);
        edtPhone.setEditable(false);
        edtEmail.setEditable(false);
        btnSave.setEnabled(false);           
        btnEdit.setText("Editar");
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        
        if(edtName.getText().length() > 0 && edtPhone.getText().length() > 0 && edtEmail.getText().length() > 0)
        {
        
            if(!btnSave.isEnabled()){//disabled
                edtName.setEditable(true);
                edtPhone.setEditable(true);
                edtEmail.setEditable(true);
                btnSave.setEnabled(true);
                btnEdit.setText("Cancelar");
            }
            else{
                edtName.setEditable(false);
                edtPhone.setEditable(false);
                edtEmail.setEditable(false);
                btnSave.setEnabled(false);            
                btnEdit.setText("Editar");
            }
        }
        else{
            showMessage(this, "Editar Contacto","Debe seleccionar primero un contacto para editarlo.",JOptionPane.WARNING_MESSAGE);
       }
    }//GEN-LAST:event_btnEditActionPerformed

    private void findMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMenuItemActionPerformed
        // TODO add your handling code here:
        Find vent = new Find();
        vent.setAlwaysOnTop(true);
    }//GEN-LAST:event_findMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        // TODO add your handling code here:
        New vent = new New();
        vent.setAlwaysOnTop(true);
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        try {            
                Class.forName("com.mysql.jdbc.Driver");            
                Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1/contacts", "root", "");
                System.out.println("Conexion exitosa...");
                showMessage(this, "Probando conexion...", "Conexion exitosa!!",JOptionPane.INFORMATION_MESSAGE);
        } 
        catch (SQLException sqlex) {
            System.out.println("MySQL Error: "+sqlex.toString());
            if(sqlex.getErrorCode() == 0){
                showMessage(this,"MySQL Error","No se encontr√≥ o no se pudo conectar con la Base de Datos.",JOptionPane.ERROR_MESSAGE);
            }
            else
                showMessage(this, "MySQL Error", sqlex.getMessage(),JOptionPane.ERROR_MESSAGE);
        }   
        catch (ClassNotFoundException err) {
                err.printStackTrace();
                showMessage(this, "ClassNotFoundException Error", "No se encuentra la Clase especificada: "+err.getMessage(),JOptionPane.ERROR_MESSAGE);
        }                
        catch (Exception ex) {
            System.out.println("se ha producido un error inesperado: "+ex.getMessage());
            showMessage(this, "Error", "Se ha producido un error inesperado: "+ex.getMessage(),JOptionPane.ERROR_MESSAGE);
        }
        
//        showMessage("title", "message");        
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        // TODO add your handling code here:
        
        if(edtName.getText().length() > 0 && edtPhone.getText().length() > 0 && edtEmail.getText().length() > 0)
        {
            int resp = JOptionPane.showConfirmDialog(this, "Realmente desea eliminar el conatcto?","Eliminar Contacto", JOptionPane.OK_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (JOptionPane.OK_OPTION == resp){
      //        System.out.println("Selecciona opci√≥n Afirmativa");          
                try {

                  Class.forName("com.mysql.jdbc.Driver");            
                  Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1/contacts", "root", "");
      //            System.out.println("Conexion exitosa...");

                  PreparedStatement preparedStatement = conn.prepareStatement("DELETE FROM contacts.contact WHERE contact.id=?",Statement.RETURN_GENERATED_KEYS);
                  preparedStatement.setInt(1,selectedID);
                  preparedStatement.executeUpdate();

                  edtName.setText("");
                  edtPhone.setText("");
                  edtEmail.setText("");
                  btnEdit.setEnabled(false);
                  btnDel.setEnabled(false);
                  contacts.Home.showMessage(this, "Eliminar Contacto","Contacto eliminado correctamente!",JOptionPane.INFORMATION_MESSAGE);
                  contacts.Home.getDBData();
              } 
              catch (SQLException sqlex) {
                  System.out.println("MySQL Error: "+sqlex.toString());            
                  contacts.Home.showMessage(this, "MySQL Error","No se pudo insertar el nuevo contacto. Se ha producido un Error: "+sqlex.getMessage(),JOptionPane.ERROR_MESSAGE);
      //            statusBar.setText("MySQL Error: "+sqlex.getMessage());
              }   
              catch (ClassNotFoundException err) {
                  err.printStackTrace();         
                  contacts.Home.showMessage(this, "ClassNotFoundException","No se encuentra la Clase especificada: "+err.getMessage(),JOptionPane.ERROR_MESSAGE);
      //            statusBar.setText("ClassNotFoundException: "+"No se encuentra la Clase especificada: "+err.getMessage());
              }                
              catch (Exception ex) {
                  System.out.println("Se ha producido un error inesperado: "+ex.getMessage());            
                  contacts.Home.showMessage(this, "Error","Se ha producido un error inesperado: "+ex.getMessage(),JOptionPane.ERROR_MESSAGE);
      //            statusBar.setText("Error: Se ha producido un error inesperado: "+ex.getMessage());
              }
            }
        }
        else{
            showMessage(this, "Eliminar Contacto","Debe seleccionar primero un contacto para eliminarlo.",JOptionPane.WARNING_MESSAGE);
       }
      

    }//GEN-LAST:event_btnDelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        try {
            
            Class.forName("com.mysql.jdbc.Driver");            
            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1/contacts", "root", "");
//            System.out.println("Conexion exitosa...");
            
            PreparedStatement preparedStatement = conn.prepareStatement("UPDATE contacts.contact SET name=?,phone=?,email=? WHERE contact.id=?",Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setString(1,edtName.getText());
            preparedStatement.setString(2,edtPhone.getText());
            preparedStatement.setString(3,edtEmail.getText());
            preparedStatement.setInt(4,selectedID);
            preparedStatement.executeUpdate();
            
            contacts.Home.showMessage(this, "Modificar Contacto","Contacto modificado correctamente!",JOptionPane.INFORMATION_MESSAGE);
            contacts.Home.getDBData();
            edtName.setEditable(false);
            edtPhone.setEditable(false);
            edtEmail.setEditable(false);
            btnSave.setEnabled(false);            
            btnEdit.setText("Editar");
        } 
        catch (SQLException sqlex) {
            System.out.println("MySQL Error: "+sqlex.toString());            
            contacts.Home.showMessage(this, "MySQL Error","No se pudo insertar el nuevo contacto. Se ha producido un Error: "+sqlex.getMessage(),JOptionPane.ERROR_MESSAGE);
//            statusBar.setText("MySQL Error: "+sqlex.getMessage());
        }   
        catch (ClassNotFoundException err) {
            err.printStackTrace();         
            contacts.Home.showMessage(this, "ClassNotFoundException","No se encuentra la Clase especificada: "+err.getMessage(),JOptionPane.ERROR_MESSAGE);
//            statusBar.setText("ClassNotFoundException: "+"No se encuentra la Clase especificada: "+err.getMessage());
        }                
        catch (Exception ex) {
            System.out.println("Se ha producido un error inesperado: "+ex.getMessage());            
            contacts.Home.showMessage(this, "Error","Se ha producido un error inesperado: "+ex.getMessage(),JOptionPane.ERROR_MESSAGE);
//            statusBar.setText("Error: Se ha producido un error inesperado: "+ex.getMessage());
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        About vent = new About();
        vent.setAlwaysOnTop(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // TODO add your handling code here:
//        jFileChooser1.showSaveDialog(this);
        if (jFileChooser1.showSaveDialog(this) == jFileChooser1.APPROVE_OPTION) {
                        
            File fich = new File(jFileChooser1.getSelectedFile().getPath());
            File fichtxt = new File(jFileChooser1.getSelectedFile().getPath()+".txt");
            if(fich.exists() || fichtxt.exists())
            {
                int resp = JOptionPane.showConfirmDialog(this, "El archivo ya existe, desea reemplazarlo?","Exportar agenda", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (JOptionPane.OK_OPTION == resp)//reemplazar
                {
                    try {
                        Class.forName("com.mysql.jdbc.Driver");            
                        Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1/contacts", "root", "");
            //            System.out.println("Conexion exitosa...");
                        statusBar.setText("Conexion exitosa!");
                        
                        String path = jFileChooser1.getSelectedFile().getPath();
                        if(path.lastIndexOf(".") < 0)//filename viene sin extension.
                            path = path+".txt";

                        //Buscar en la agenda telef.
                        Statement consulta = conn.createStatement();
                        ResultSet result = consulta.executeQuery("SELECT * FROM contact");
//                        int row = 0;
                        PrintWriter salida = new PrintWriter(path);
                        salida.println("*\t\t\tAgenda de Contactos\t\t\t*");// \t = tab
                        salida.println("*****************************************************************");
                        salida.println("Nombre\t\t\tTel√©fono\tEmail");// \t = tab
                        salida.println("-----------------------------------------------------------------");
                        
                        while (result.next()){
                            salida.println(result.getString("name")+"\t"+result.getString("phone")+"\t"+result.getString("email"));// \t = tab 
                            salida.println("-----------------------------------------------------------------");
                        }                       
                        
                        salida.close();
                        showMessage(this, "Exportar Contactos", "Agenda exportada correctamente.", JOptionPane.INFORMATION_MESSAGE);
                        
                    } 
                    catch (SQLException ex) {
//                        showMessage(this,"SQLError","Ha ocurrido un error: "+ex.getMessage(),JOptionPane.ERROR_MESSAGE);
                        if(ex.getErrorCode() == 0){
                            showMessage(this,"MySQL Error","No se encontr√≥ o no se pudo conectar con la Base de Datos.",JOptionPane.ERROR_MESSAGE);
                        }
                        else
                            showMessage(this, "MySQL Error", ex.getMessage(),JOptionPane.ERROR_MESSAGE);
                    }
                    catch (ClassNotFoundException ex) {
                        showMessage(this,"Error","ClassNotFoundException: "+ex.getMessage(),JOptionPane.ERROR_MESSAGE);
                    }
                    catch(java.io.IOException ioex) {
                        showMessage(this,"Error","Ha ocurrido un error inesperado: "+ioex.getMessage(),JOptionPane.ERROR_MESSAGE);        
                    }
                }
            
            }
            else
            {
                try {
                        Class.forName("com.mysql.jdbc.Driver");            
                        Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1/contacts", "root", "");
            //            System.out.println("Conexion exitosa...");
                        statusBar.setText("Conexion exitosa!");
                        
                        String path = jFileChooser1.getSelectedFile().getPath();
                        if(!path.contains(".txt"))//filename no viene con extension(.txt)
                            path = path+".txt";

                        //Buscar en la agenda telef.
                        Statement consulta = conn.createStatement();
                        ResultSet result = consulta.executeQuery("SELECT * FROM contact");
//                        int row = 0;
                        PrintWriter salida = new PrintWriter(path);
                        salida.println("*\t\t\tAgenda de Contactos\t\t\t*");// \t = tab
                        salida.println("*****************************************************************");
                        salida.println("Nombre\t\t\tTel√©fono\tEmail");// \t = tab
                        salida.println("-----------------------------------------------------------------");
                        
                        while (result.next()){
                            salida.println(result.getString("name")+"\t"+result.getString("phone")+"\t"+result.getString("email"));// \t = tab 
                            salida.println("-----------------------------------------------------------------");
                        }                       
                        
                        salida.close();
                        showMessage(this, "Exportar Contactos", "Agenda exportada correctamente.", JOptionPane.INFORMATION_MESSAGE);
                        
                    } 
                    catch (SQLException ex) {
                        showMessage(this,"SQLError: ","Ha ocurrido un error: "+ex.getMessage(),JOptionPane.ERROR_MESSAGE);
                    }
                    catch (ClassNotFoundException ex) {
                        showMessage(this,"Error","ClassNotFoundException: "+ex.getMessage(),JOptionPane.ERROR_MESSAGE);
                    }
                    catch(java.io.IOException ioex) {
                        showMessage(this,"Error","Ha ocurrido un error inesperado: "+ioex.getMessage(),JOptionPane.ERROR_MESSAGE);        
                    }
            
            }

      }//APPROVE_OPTION
//        else{
////      if (jFileChooser1.showSaveDialog(this) == jFileChooser1.CANCEL_OPTION ) {
//        showMessage(this,"","You pressed cancel",JOptionPane.INFORMATION_MESSAGE);
//        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void testDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testDataMenuItemActionPerformed
        // TODO add your handling code here:
        
        try {
            String [][] data = new String [][] {
                {"Carlos Tercero Garcia","1800123456","carlos@mail.com"},
                {"Jorge Gomez Claro","3515131315","jorge@mail.com"},
                {"Marcel Dominguez","2131684155","marcel@mail.com"},
                {"Leonardo Hernandez","6876124683","leo@mail.com"},
                {"Vititi Modesto Garcia","3218656540","viti@mail.com"},
                {"Alam Brito Prieto","2365456546","prieto@mail.com"},
                {"Jane Doe Aparecida","3216546898","jane@mail.com"},
                {"John Doe Aparecido","1321656878","john@mail.com"},
                {"Kim Sam Sung Lee","8765431321","sam@mail.com"},
                {"Bruno Corria Feroz","4561634665","bruno@mail.com"},
            };                
        
            Class.forName("com.mysql.jdbc.Driver");          
            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1/contacts", "root", "");
//            System.out.println("Conexion exitosa...");
            
            for (int i = 0; i < data.length; i++) {
                
                PreparedStatement preparedStatement = conn.prepareStatement("INSERT into contact (name,phone,email) VALUES (?,?,?)");
                preparedStatement.setString(1,data[i][0]);                           
                preparedStatement.setString(2,data[i][1]);                           
                preparedStatement.setString(3,data[i][2]);

                preparedStatement.executeUpdate();                
            }
            
            contacts.Home.showMessage(this, "Insertar Datos de Prueba","Datos de prueba insertados correctamente!",JOptionPane.INFORMATION_MESSAGE);
//            contacts.Home.showMessage(this, "Insertar Datos de Prueba",data[0][0],JOptionPane.INFORMATION_MESSAGE);
            contacts.Home.getDBData();
        } 
        catch (SQLException sqlex) {
            System.out.println("MySQL Error: "+sqlex.toString());
            if(sqlex.getErrorCode() == 0){
                showMessage(this,"MySQL Error","No se encontr√≥ o no se pudo conectar con la Base de Datos.",JOptionPane.ERROR_MESSAGE);
            }
            else
                showMessage(this, "MySQL Error","No se pudieron insertar los datos de prueba. Se ha producido un Error: "+sqlex.getMessage(),JOptionPane.ERROR_MESSAGE);
//            statusBar.setText("MySQL Error: "+sqlex.getMessage());
        }   
        catch (ClassNotFoundException err) {
            err.printStackTrace();         
            showMessage(this, "ClassNotFoundException","No se encuentra la Clase especificada: "+err.getMessage(),JOptionPane.ERROR_MESSAGE);
//            statusBar.setText("ClassNotFoundException: "+"No se encuentra la Clase especificada: "+err.getMessage());
        }                
        catch (Exception ex) {
            System.out.println("Se ha producido un error inesperado: "+ex.getMessage());            
            showMessage(this, "Error","Se ha producido un error inesperado: "+ex.getMessage(),JOptionPane.ERROR_MESSAGE);
//            statusBar.setText("Error: Se ha producido un error inesperado: "+ex.getMessage());
        }
    }//GEN-LAST:event_testDataMenuItemActionPerformed

    private void truncateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_truncateMenuItemActionPerformed
        // TODO add your handling code here:
        
        int resp = JOptionPane.showConfirmDialog(this, "Realmente desea vaciar la agenda? Se eliminar√°n todos los contactos permanentemente.","Vaciar Agenda", JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
            if (JOptionPane.OK_OPTION == resp){
      //        System.out.println("Selecciona opci√≥n Afirmativa");          
                try {

                  Class.forName("com.mysql.jdbc.Driver");            
                  Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1/contacts", "root", "");
      //            System.out.println("Conexion exitosa...");

                  PreparedStatement preparedStatement = conn.prepareStatement("TRUNCATE TABLE contact");
                  preparedStatement.executeUpdate();
                  
                  showMessage(this,"Vaciar Agenda","Agenda vaciada correctamente!",JOptionPane.INFORMATION_MESSAGE);
                  edtName.setText("");
                  edtPhone.setText("");
                  edtEmail.setText("");
                  btnDel.setEnabled(false);
                  btnEdit.setEnabled(false);
                  getDBData();
              } 
              catch (SQLException sqlex) {
                  System.out.println("MySQL Error: "+sqlex.toString());
                  if(sqlex.getErrorCode() == 0){
                    showMessage(this,"MySQL Error","No se encontr√≥ o no se pudo conectar con la Base de Datos.",JOptionPane.ERROR_MESSAGE);
                  }
                  else
                    showMessage(this, "MySQL Error","No se pudo vaciar la agenda. Se ha producido un Error: "+sqlex.getMessage(),JOptionPane.ERROR_MESSAGE);
      //            statusBar.setText("MySQL Error: "+sqlex.getMessage());
              }   
              catch (ClassNotFoundException err) {
                  err.printStackTrace();         
                  contacts.Home.showMessage(this, "ClassNotFoundException","No se encuentra la Clase especificada: "+err.getMessage(),JOptionPane.ERROR_MESSAGE);
      //            statusBar.setText("ClassNotFoundException: "+"No se encuentra la Clase especificada: "+err.getMessage());
              }                
              catch (Exception ex) {
                  System.out.println("Se ha producido un error inesperado: "+ex.getMessage());            
                  contacts.Home.showMessage(this, "Error","Se ha producido un error inesperado: "+ex.getMessage(),JOptionPane.ERROR_MESSAGE);
      //            statusBar.setText("Error: Se ha producido un error inesperado: "+ex.getMessage());
              }
            }
        
    }//GEN-LAST:event_truncateMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {                
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JMenuItem aboutMenuItem;
    private static javax.swing.JButton btnDel;
    private static javax.swing.JButton btnEdit;
    private static javax.swing.JButton btnSave;
    private static javax.swing.JMenu editMenu;
    private static javax.swing.JTextField edtEmail;
    private static javax.swing.JTextField edtName;
    private static javax.swing.JTextField edtPhone;
    private static javax.swing.JMenuItem exitMenuItem;
    private static javax.swing.JMenu fileMenu;
    private static javax.swing.JMenuItem findMenuItem;
    private static javax.swing.JMenu helpMenu;
    private static javax.swing.JDialog jDialog1;
    private static javax.swing.JFileChooser jFileChooser1;
    private static javax.swing.JPanel jPanel1;
    private static javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JPopupMenu.Separator jSeparator1;
    private static javax.swing.JPopupMenu.Separator jSeparator2;
    private static javax.swing.JPopupMenu.Separator jSeparator3;
    private static javax.swing.JTable jTable1;
    private static javax.swing.JLabel lblEmail;
    private static javax.swing.JLabel lblName;
    private static javax.swing.JLabel lblPhone;
    private static javax.swing.JMenuBar menuBar;
    private static javax.swing.JMenuItem newMenuItem;
    private static javax.swing.JMenuItem openMenuItem;
    private static javax.swing.JMenuItem saveAsMenuItem;
    private static javax.swing.JTextPane statusBar;
    private static javax.swing.JMenuItem testDataMenuItem;
    private static javax.swing.JMenuItem truncateMenuItem;
    // End of variables declaration//GEN-END:variables

    private static int selectedID;
    
    @Override
    public void actionPerformed(ActionEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

//    @Override
//    public void tableChanged(TableModelEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//        
//    }

    /**
     *
     * @param parent//ventana padre.
     * @param title
     * @param message
     * @param messageType
     */
    public static void showMessage(Component parent, String title,String message,int messageType){

    // show a joptionpane dialog using showMessageDialog
//    javax.swing.JOptionPane.showMessageDialog(frame,"Problem writing to backup directory: '" + "/win" + "'.","Backup problem",javax.swing.JOptionPane.INFORMATION_MESSAGE);
//    javax.swing.JOptionPane.showMessageDialog(parent,message,title,JOptionPane.INFORMATION_MESSAGE);
    JOptionPane.showMessageDialog(parent,message,title,messageType);
      
    }
    
    public static int getSelectedID(){
        return selectedID;    
    }
    
    public static void setSelectedID(int id){
        selectedID = id;    
    }
    
    public static void setContactName(String name){
        edtName.setText(name);
    }
    public static void setContactPhone(String phone){
        edtPhone.setText(phone);
    }
    public static void setContactEmail(String email){
        edtEmail.setText(email);
    }
    
    public static boolean getDBData(){
        
        try {
            
            Class.forName("com.mysql.jdbc.Driver");            
            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1/contacts", "root", "");
//            System.out.println("Conexion exitosa...");
            statusBar.setText("Conexion exitosa!");
            
            //total de tuplas en DB.
            Statement statement = conn.createStatement();
            ResultSet res = statement.executeQuery("SELECT count(*) FROM contact");
            res.first();
            int total = Integer.parseInt(res.getString(1));
            String[][] data = new String[total][1];
            
            if(total > 0)
            {
                //Buscar en la agenda telef.
                Statement consulta = conn.createStatement();
                ResultSet result = consulta.executeQuery("SELECT * FROM contact");
                int row = 0;

                System.out.println("ID\tNombre \t\t Telefono\tTotal("+total+")");// \t = tab
                while (result.next()){                                   
                    data[row][0] = result.getString("name");                
                    row++;                        
                    System.out.println(result.getString(1)+"\t"+result.getString("name")+"\t"+result.getString(3));
                }
            
            }//if total
            jTable1.setModel(new javax.swing.table.DefaultTableModel(data,
//                new Object [][]{                    
//                    {"Value 11"},
//                    {"Value 12"},
//                    {"Value 13"},
//                    {"Value 14"},
//                    {"Value 15"}
//                },
                new String [] {"Nombre"}
                ){//para no poder editar las celdas de la tabla con doble click.                    
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                }
            );        
            
            return true;
        } 
        catch (SQLException sqlex) {
            System.out.println("MySQL Error: "+sqlex.toString());
            if(sqlex.getErrorCode() == 0){
                statusBar.setText("MySQL Error: No se encontr√≥ o no se pudo conectar con la Base de Datos.");
//                jTable1.setEnabled(false);
            }
            else
                statusBar.setText("MySQL Error: "+sqlex.getMessage());
        }   
        catch (ClassNotFoundException err) {
            err.printStackTrace();
            statusBar.setText("ClassNotFoundException: "+"No se encuentra la Clase especificada: "+err.getMessage());
        }                
        catch (Exception ex) {
            System.out.println("Se ha producido un error inesperado: "+ex.getMessage());
            statusBar.setText("Error: Se ha producido un error inesperado: "+ex.getMessage());
        }
        return false;
        
    }

}
